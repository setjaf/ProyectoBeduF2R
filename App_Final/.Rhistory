auxtau2 = (1/2)*(sum((theta1[i]-mu[i])^2)+sum((theta2[i]-mu[i])^2))+b2
tau2[i] = 1/rgamma(1, shape = auxtau1, rate = auxtau2)
auxsigmamu1 = (1/2)+a3
auxsiggmamu2 = (1/2)*(mu[i]-mu0)^2+b3
sigma2mu[i] = 1/rgamma(1,shape = auxsigmamu1,rate = auxsiggmamu2)
}
##### HISTOGRAMAS
par(mfrow=c(2,3),mar=c(4,4,1,1))
top=max(mu);bot=min(mu)
hist(mu,col="grey",breaks=25,xlab="",main=expression(mu),fre=F)
hist(theta1,col="grey",breaks=25,xlab="",main=expression(theta[1]),fre=F)
hist(theta2,col="grey",breaks=25,xlab="",main=expression(theta[2]),fre=F)
hist(sqrt(sigma2mu),col="sienna",breaks=50,xlim=c(.5,4),xlab="",main=expression(sigma[mu]),fre=F)
hist(sqrt(tau2), col="sienna",breaks=25,xlim=c(.5,4),xlab="",main=expression(tau),fre=F)
hist(sqrt(sigma2), col="sienna",breaks=25,xlim=c(.5,2),xlab="",main=expression(sigma),fre=F)
set.seed(114556)
library(rjags)
library(MCMCpack)
library(mcsm)
data(Energy)
set.seed(114556)
##### DATOS INICIALES
iters <- 5000
x1 <- log(Energy$Girls)
x2 <- log(Energy$Boys)
n1 <- n2 <- length(x1)
n <- n1 + n2
xbar1 <- mean(x1)
xbar2 <- mean(x2)
xbar <- (n1*xbar1 + n2*xbar2)/n
a <- a1 <- a2 <- a3 <- 1
b <- b1 <- b2 <- b3 <- 1
k <- 2
mu <- c(xbar)
theta1 <- c(xbar1)
theta2 <- c(xbar2)
sigma2mu <- sigma2 <- tau2 <- c(var((x1) + var(x2))/2)
mu0 <- xbar
##### CICLO
for (i in 2:iters) {
auxtheta1 = sigma2[i-1]/(sigma2[i-1]+n1*tau2[i-1])
auxtheta2 = sigma2[i-1]/(sigma2[i-1]+n2*tau2[i-1])
theta1[i] = rnorm(1, mean = auxtheta1*mu[i-1]+(1-auxtheta1)*xbar1,
sd = sqrt(tau2[i-1]*auxtheta1))
theta2[i] = rnorm(1,mean = auxtheta2*mu[i-1]+(1-auxtheta2)*xbar2,
sd = sqrt(tau2[i-1]*auxtheta2))
auxmu1 = tau2[i-1]/(k*sigma2mu[i-1]+tau2[i-1])
auxmu2 = auxmu1*mu0+(1-auxmu1)*(n1*theta1[i]+n2*theta2[i])/n
mu[i] = rnorm(1, mean = auxmu2,sd = sqrt(sigma2mu[i-1]*auxmu1))
auxsig1 = (n/2)+a1
auxsig2 = (1/2)*(sum((x1-theta1[i])^2)+sum((x2-theta2[i])^2))+b1
sigma2[i] = 1/rgamma(1, shape = auxsig1, rate = auxsig2)
auxtau1 = (k/2)+a2
auxtau2 = (1/2)*(sum((theta1[i]-mu[i])^2)+sum((theta2[i]-mu[i])^2))+b2
tau2[i] = 1/rgamma(1, shape = auxtau1, rate = auxtau2)
auxsigmamu1 = (1/2)+a3
auxsiggmamu2 = (1/2)*(mu[i]-mu0)^2+b3
sigma2mu[i] = 1/rgamma(1,shape = auxsigmamu1,rate = auxsiggmamu2)
}
##### HISTOGRAMAS
par(mfrow=c(2,3),mar=c(4,4,1,1))
top=max(mu);bot=min(mu)
hist(mu,col="grey",breaks=25,xlab="",main=expression(mu),fre=F)
hist(theta1,col="grey",breaks=25,xlab="",main=expression(theta[1]),fre=F)
hist(theta2,col="grey",breaks=25,xlab="",main=expression(theta[2]),fre=F)
hist(sqrt(sigma2mu),col="sienna",breaks=50,xlim=c(.5,4),xlab="",main=expression(sigma[mu]),fre=F)
hist(sqrt(tau2), col="sienna",breaks=25,xlim=c(.5,4),xlab="",main=expression(tau),fre=F)
hist(sqrt(sigma2), col="sienna",breaks=25,xlim=c(.5,2),xlab="",main=expression(sigma),fre=F)
source('~/.active-rstudio-document', echo=TRUE)
library(rjags)
library(MCMCpack)
library(mcsm)
data(Energy)
set.seed(1234567890)
##### DATOS INICIALES
iters <- 5000
x1 <- log(Energy$Girls)
x2 <- log(Energy$Boys)
n1 <- n2 <- length(x1)
n <- n1 + n2
xbar1 <- mean(x1)
xbar2 <- mean(x2)
xbar <- (n1*xbar1 + n2*xbar2)/n
a <- a1 <- a2 <- a3 <- 1
b <- b1 <- b2 <- b3 <- 1
k <- 2
mu <- c(xbar)
theta1 <- c(xbar1)
theta2 <- c(xbar2)
sigma2mu <- sigma2 <- tau2 <- c(var((x1) + var(x2))/2)
mu0 <- xbar
##### CICLO
for (i in 2:iters) {
auxtheta1 = sigma2[i-1]/(sigma2[i-1]+n1*tau2[i-1])
auxtheta2 = sigma2[i-1]/(sigma2[i-1]+n2*tau2[i-1])
theta1[i] = rnorm(1, mean = auxtheta1*mu[i-1]+(1-auxtheta1)*xbar1,
sd = sqrt(tau2[i-1]*auxtheta1))
theta2[i] = rnorm(1,mean = auxtheta2*mu[i-1]+(1-auxtheta2)*xbar2,
sd = sqrt(tau2[i-1]*auxtheta2))
auxmu1 = tau2[i-1]/(k*sigma2mu[i-1]+tau2[i-1])
auxmu2 = auxmu1*mu0+(1-auxmu1)*(n1*theta1[i]+n2*theta2[i])/n
mu[i] = rnorm(1, mean = auxmu2,sd = sqrt(sigma2mu[i-1]*auxmu1))
auxsig1 = (n/2)+a1
auxsig2 = (1/2)*(sum((x1-theta1[i])^2)+sum((x2-theta2[i])^2))+b1
sigma2[i] = 1/rgamma(1, shape = auxsig1, rate = auxsig2)
auxtau1 = (k/2)+a2
auxtau2 = (1/2)*(sum((theta1[i]-mu[i])^2)+sum((theta2[i]-mu[i])^2))+b2
tau2[i] = 1/rgamma(1, shape = auxtau1, rate = auxtau2)
auxsigmamu1 = (1/2)+a3
auxsiggmamu2 = (1/2)*(mu[i]-mu0)^2+b3
sigma2mu[i] = 1/rgamma(1,shape = auxsigmamu1,rate = auxsiggmamu2)
}
##### HISTOGRAMAS
par(mfrow=c(2,3),mar=c(4,4,1,1))
top=max(mu);bot=min(mu)
hist(mu,col="grey",breaks=25,xlab="",main=expression(mu),fre=F)
hist(theta1,col="grey",breaks=25,xlab="",main=expression(theta[1]),fre=F)
hist(theta2,col="grey",breaks=25,xlab="",main=expression(theta[2]),fre=F)
hist(sqrt(sigma2mu),col="sienna",breaks=50,xlim=c(.5,4),xlab="",main=expression(sigma[mu]),fre=F)
hist(sqrt(tau2), col="sienna",breaks=25,xlim=c(.5,4),xlab="",main=expression(tau),fre=F)
hist(sqrt(sigma2), col="sienna",breaks=25,xlim=c(.5,2),xlab="",main=expression(sigma),fre=F)
install.packages("Rbitcoin")
install.packages(c("Rfacebook", "twitteR"))
library(Rbitcoin)
data("api.dict")
View(api.dict)
install.packages("rbitcoinchartsapi")
library(rbitcoinchartsapi)
GetHistoricTradeData()
GetHistoricTradeData(currency = "USD")
params <- list (currency="USD")
GetHistoricTradeData(params)
GetMarketData(params)
df <- GetMarketData(params)
View(df)
R.version()
surv_A <- Surv(tiempo_A, censura_A)
library(survival)
tiempo_A <- c(4, 6, 8, 10, 11, 17, 18, 18)
censura_A <- c(1, 1, 0, 1, 1, 1, 1, 0)
tiempo_B <- c(5, 8, 9, 12, 15, 19, 19, 23)
censura_B <- c(1, 1, 0, 1, 1, 0, 1, 1)
surv_A <- Surv(tiempo_A, censura_A)
summary(surv_A)
plot(surv_A)
surv_B <- Surv(tiempo_B, censura_B)
mod_A <- survfit(surv_A ~ 1, type = "kaplan-meier")
mod_B <- survfit(surv_B ~ 1, type = "kaplan-meier")
?survfit
summary(mod_A)
summary(mod_B)
plot(mod_A)
plot(mod_A, main = "Función de supervivencia para el grupo A",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
plot(mod_B, main = "Función de supervivencia para el grupo B",
col = "red", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
plot(mod_A, main = "Función de supervivencia\nGrupo A",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
plot(mod_B, main = "Función de supervivencia\nGrupo B",
col = "red", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
datos <- data.frame(Tiempos = c(tiempo_A, tiempo_B),
Censuras = c(censura_A, censura_B),
Grupo = as.factor(c(rep("A", 8), rep("B", 8))))
View(datos)
?survdiff
mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, rho = 0)
summary(mod)
mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0)
summary(mod)
plot(mod)
str(datos)
mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0)
summary(mod)
survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0)
(mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0))
plot(mod)
View(mod)
plot(surv_A)
?Surv
surv_A
# Resumenes
summary(mod_A)
summary(mod_B)
mod_B
surv_B
plot(mod_A, main = "Función de supervivencia\nGrupo A",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
plot(mod_B, main = "Función de supervivencia\nGrupo B",
col = "red", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
plot(mod_A, main = "Función de supervivencia\nGrupo A",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
lines(mod_B)
plot(mod_A, main = "Funciónes de supervivencia",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
lines(mod_B, col = "red", lwd = 2)
?legend
plot(mod_A, main = "Funciones de supervivencia",
col = "blue", lwd = 2, xlab = "Tiempo", ylab = "Función de supervivencia")
lines(mod_B, col = "red", lwd = 2)
legend("bottomleft", c("Grupo A", "Grupo B"), fill = c("blue", "red"))
mod_A$conf.int
(mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0))
qchisq(0.95, 1)
(mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0))
Surv(datos$Tiempos, datos$Censuras)
plot(Surv(datos$Tiempos, datos$Censuras))
qchisq(0.05, 1)
qchisq(0.95, 1)
?survdiff
mod_A
summary(mod_A)
library(xtable)
confint(mod_A$surv)
confint(mod_A$surv)
aux_A <- data.frame(Tiempo = mod_A$time, lower_95%_CI = mod_A$lower,
Estimador_KM = mod_A$surv, upper_95%_CI = mod_A$upper)
aux_A <- data.frame(Tiempo = mod_A$time, lower95% = mod_A$lower,
Estimador_KM = mod_A$surv, upper95% = mod_A$upper)
aux_A <- data.frame(Tiempo = mod_A$time, low = mod_A$lower,
Estimador_KM = mod_A$surv, up = mod_A$upper)
aux_A
print(xtable(aux_A, type = "latex"), file = "tabla.tex")
aux_B <- data.frame(Tiempo = mod_B$time, low = mod_B$lower,
Estimador_KM = mod_B$surv, up = mod_B$upper)
print(xtable(aux_B, type = "latex"), file = "tabla.tex")
aux_B
source('~/Documentos/FCiencias/2021-1/R\'s/EstIII_T5.R', echo=TRUE)
?survdiff
mod$chisq
mod$call
mod$var
mod$n
mod$obs
mod$chisq
qchisq(0.95, 1)
(mod <- survdiff(Surv(datos$Tiempos, datos$Censuras)~datos$Grupo, data = datos, rho = 0))
qchisq(0.95, 1)
cuant <- qchisq(mod$chisq, 1)
cuant <- qchisq(0.95, 1)
library(dplyr)
library(ggplot2)
library(rjags)
library(MCMCpack)
library(glm2)
df <- read.csv("Descargas/Data_training.csv")
glimpse(df)
df$X16 <- as.factor(df$X16)
glimpse(df)
pairs(df)
pairs(df[1:3, 1:3])
pairs(df[1:5, 1:5])
pairs(df[1:10, 1:10])
pairs(df[1:15, 1:15])
pairs(df[1:17, 1:17])
install.packages("nnet")
?nnet
library(tidyverse)
library(rjags)
library(MCMCpack)
library(glm2)
df <- read.csv("Descargas/Data_training.csv")
glimpse(df)
df$X16 <- as.factor(df$X16)
glimpse(df)
pairs(df)
library(nnet)
glimpse(df)
mod_clas <- multinom(df$X16 ~., data = df)
summary(mod_clas)
exp(coef(mod_clas))
exp(coef(mod_clas))
df <- read.csv("Descargas/Data_training.csv")
glimpse(df)
df$X16 <- as.factor(df$X16)
glimpse(df)
mod_clas <- multinom(df$X16 ~., data = df)
summary(mod_clas)
exp(coef(mod_clas))
head(round(fitted(mod_clas), 2))
head(round(fitted(mod_clas), 3))
aux <- head(round(fitted(mod_clas), 1))
aux
aux <- head(round(fitted(mod_clas), 3), 1)
aux
which.max(aux)
probas <- round(fitted(mod_clas), 3)
head(probas)
dim(probas)
aux <- c()
for (i in 1:dim(probas)[1]){
aux[i] <- which.max(probas[i, ]) - 1
}
df$X16 == aux
sum(df$X16 == aux)
glimpse(df)
probas <- round(fitted(mod_clas), 3)
probas
for (i in 1:dim(probas)[1]){
aux[i] <- which.max(probas[i, ]) - 1
}
aux
probas
table(aux)
sum(df$X16 == aux)
3988/1142
1142/3988
library(dplyr)
library(rjags)
library(MCMCpack)
library(nnet)
df <- read.csv("Descargas/Data_training.csv")
glimpse(df)
df$X16 <- as.factor(df$X16)
glimpse(df)
?multinom
mod_clas <- multinom(df$X16 ~., data = df)
summary(mod_clas)
probas <- round(fitted(mod_clas), 3)
probas
probas <- round(fitted(mod_clas), 3)
clasif <- c()
for (i in 1:dim(probas)[1]){
clasif[i] <- which.max(probas[i, ]) - 1
}
table(df$X16, clasif)
library(dplyr)
library(rjags)
library(MCMCpack)
library(nnet)
# Leemos el archivo
train <- read.csv("Descargas/Data_training.csv")
n <- dim(train)[2]
train[,n] <- as.factor(df$X16)
train[,16]
train[,17]
n <- dim(train)[2]
train[,n] <- as.factor(train[,n])
glimpse(train)
mod_clas <- multinom(train[, n] ~., data = train)
summary(mod_clas)
# Extraemos el vector de probabilidades del modelo. El criterio a elegir para
# las categorias es aquellas que tengan la mayor probabilidad
probs <- round(fitted(mod_clas), 3)
clasif <- c()
for (i in 1:dim(probas)[1]){
clasif[i] <- which.max(probas[i, ]) - 1
}
source('~/.active-rstudio-document', echo=TRUE)
for (i in 1:dim(probas)[1]){
modelo[i] <- which.max(probs[i, ]) - 1
}
for (i in 1:dim(probs)[1]){
modelo[i] <- which.max(probs[i, ]) - 1
}
real <- train[,n]
table(real, modelo)
source('~/.active-rstudio-document', echo=TRUE)
head(probs)
source('~/.active-rstudio-document', echo=TRUE)
real
modelo
library(dplyr)
library(rjags)
library(MCMCpack)
library(nnet)
# Leemos el archivo
train <- read.csv("Descargas/Data_training.csv")
# La clasificación se encuentra en la ultima columna
n <- dim(train)[2]
train[,n] <- as.factor(train[,n])
glimpse(train)
# Ajustamos una regresión multinomial
mod_clas <- multinom(train[, n] ~., data = train)
# Extraemos el vector de probabilidades del modelo. El criterio a elegir para
# las categorias es aquellas que tengan la mayor probabilidad
probs <- round(fitted(mod_clas), 3)
modelo <- c()
for (i in 1:dim(probs)[1]){
modelo[i] <- which.max(probs[i, ]) - 1
}
real <- train[,n]
table(real, modelo)
sum(real == modelo)
fitted(mod_clas)
probs
sum(real == modelo)
sum(real == modelo)/3988
table(real, modelo)
test <- read.csv("")
table(real, modelo)
train <- read.csv("Descargas/Data_training.csv")
library(randomForest)
mod <- randomForest(train$X16 ~., data = train)
View(mod)
train$X16 <- as.factor(train$X16)
mod <- randomForest(train$X16 ~., data = train)
mod$predicted
table(train$X16, mod$predicted)
mod_2 <- multinom(train$X16 ~ ., data = train)
fitted(mod_2)
round(fitted(mod_2),3)
which.max(round(fitted(mod_2),3))
source('~/Documentos/FCiencias/2021-1/R\'s/Bayes_Proyecto.R', echo=TRUE)
mod <- randomForest(train$X16 ~., data = train)
fitted(mod)
mod$predicted
table(train$X16, mod$predicted)
library(rvest)
url <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file <- read_html(url)
TABLE <- html_nodes(file, "table")
table <- html_nodes(file, "table")
View(table)
table[[1]]
table1 <- html_table(tables[1], fill = TRUE)
table1 <- html_table(table[1], fill = TRUE)
str(table1)
View(table1)
table1 <- as.dataframe(html_table(table[1], fill = TRUE))
table1 <- dataframe(html_table(table[1], fill = TRUE))
table1 <- data.frame(html_table(table[1], fill = TRUE))
str(table1)
View(table1)
?gsub
gsub("MX", "MX123")
gsub("MX", x= "MX123")
gsub("MX", "MX123")
a <- "MX123"
gsub("MX", a)
gsub("MX", ,"", a)
gsub("MX", ," ", a)
gsub("MX"," ", a)
gsub("MX","", a)
table1$Cargo
table1$Sueldo
table1$Sueldo <- gsub("MXn$","", table1$Sueldo)
table1$Sueldo
table1$Sueldo <- gsub("MXn$","", table1$Sueldo)
View(table1)
shiny::runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
graficas_2("Candidato", "Durango")
graficas_2("Candidato", "México")
aux = e_estados_2012 %>%
mutate(ESTADO = ESTADO, E.N.P = sum(PRI,PRI_PVEM,  na.rm = T),
A.M.L.O = sum(PRD, PRD_PT_MC, PRD_PT, PRD_MC,  na.rm = T),
J.V.M = sum(PAN, na.rm = T),
G.Q.T  = sum(PVEM, na.rm = T)) %>%
filter(ESTADO == "DURANGO") %>%
select(ESTADO, E.N.P, A.M.L.O, J.V.M, G.Q.T)
View(aux)
aux2 = e_estados_2012 %>%
mutate(ESTADO = ESTADO, E.N.P = sum(PRI,PRI_PVEM,  na.rm = T),
A.M.L.O = sum(PRD, PRD_PT_MC, PRD_PT, PRD_MC,  na.rm = T),
J.V.M = sum(PAN, na.rm = T),
G.Q.T  = sum(PVEM, na.rm = T)) %>%
filter(ESTADO == "SONORA") %>%
select(ESTADO, E.N.P, A.M.L.O, J.V.M, G.Q.T)
View(aux2)
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
runApp('Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final')
datos_06
datos_06$Estado
View(datos_06)
datos_06$ESTADO
datos_06[aux,]
View(aux)
# PREP 2006 ----
datos_06 <- read.csv("PREP_2006/datos_2006.csv")
setwd("~/Documentos/FCiencias/2021-1/BEDU/Fase_2/Proyecto/App_Final")
# PREP 2006 ----
datos_06 <- read.csv("PREP_2006/datos_2006.csv")
datos_06$Estado <- str_to_upper(datos_06$Estado)
aux <- apply(datos_06[,-1], 1, which.max)
aux <- names(datos_06[,-1])[aux]
aux2 <- aux[1:4]; aux3 <- aux[5:6]; aux4 <- aux[7:8]; aux5 <- aux[9]
aux6 <- aux[10:32]
aux <- c(aux2, aux4, aux5, aux3, aux6)
(datos_06[aux,])
aux
aux_2 <- c(1:4, 7:8, 9, 5:6, 10:32)
(datos_06[aux,])
(datos_06[aux2,])
# PREP 2006 ----
datos_06 <- read.csv("PREP_2006/datos_2006.csv")
datos_06$Estado <- str_to_upper(datos_06$Estado)
aux <- apply(datos_06[,-1], 1, which.max)
aux <- names(datos_06[,-1])[aux]
aux2 <- aux[1:4]; aux3 <- aux[5:6]; aux4 <- aux[7:8]; aux5 <- aux[9]
aux6 <- aux[10:32]
aux <- c(aux2, aux4, aux5, aux3, aux6)
aux_2 <- c(1:4, 7:8, 9, 5:6, 10:32)
(datos_06[aux2,])
(datos_06[c(aux2),])
datos_06[1,]
datos_06[1:3,]
datos_06[c(1:3, 5, 4),]
datos_06[c(1:4, 7:8, 9, 5:6, 10:32),]
datos_06[9,1] = "CIUDAD DE MÉXICO"
datos_06
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("rsconnect")
shiny::runApp()
